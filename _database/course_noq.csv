CourseID,Code,DepartmentID,Name,Credit,description,StudentStandingPrerequisite,StudentStandingRecommendation
1,473,1,Modern Robot Programming,"[3,4)","The goal of this course is to learn modern methods for building up robot capabilities using the Robot Operating System (ROS). Through a sequence of assignments, students learn how to write software to control both simulated and physical robots. Material includes: interfacing software to robot I/O; path and trajectory planning for robot arms; object identification and localization from 3-D sensing; manipulation planning; and development of graphical interfaces for supervisory robot control. Laboratory assignments are scheduled in small groups to explore implementations on specific robots.  Graduate students will also perform an independent project.",null,null
2,428,1,Computer Communications Networks II,"[3,4)","Introduction to topics and methodology in computer networks and middleware research. Traffic characterization, stochastic models, and self-similarity. Congestion control (Tahoe, Reno, Sack). Active Queue Management (RED, FQ) and explicit QoS. The Web: overview and components, HTTP, its interaction with TCP, caching. Overlay networks and CDN. Expected work includes a course-long project on network simulation, a final project, a paper presentation, midterm, and final test.",null,null
3,344,1,Computer Security,"[3,4)","General types of security attacks; approaches to prevention; secret key and public key cryptography; message authentication and hash functions; digital signatures and authentication protocols; information gathering; password cracking; spoofing; session hijacking; denial of service attacks; buffer overruns; viruses, worms, etc., principles of secure software design, threat modeling; access control; least privilege; storing secrets; socket security; firewalls; intrusions; auditing; mobile security.",null,null
4,500,1,Graduate Teaching II,"[0,1)","This course will provide the Ph.D. candidate with experience in teaching undergraduate or graduate students.  The experience is expected to involve direct student contact but will be based upon the specific departmental needs and teaching obligations.  This teaching experience will be conducted under the supervision of the faculty member who is responsible for the course, but the academic advisor will assess the educational plan to ensure that it provides an educational experience for the student.  Students in this course may be expected to perform one or more of the following teaching related activities: grading homeworks, quizzes, and exams, having office hours for students, running recitation sessions, providing laboratory assistance.",null,'Ph.D.'
5,340,1,Machine Learning for Big Data,"[3,4)","Machine learning is a sub-field of Artificial Intelligence that is concerned with the design and analysis of algorithms that ""learn"" and improve with experience, While the broad aim behind research in this area is to build systems that can simulate or even improve on certain aspects of human intelligence, algorithms developed in this area have become very useful in analyzing and predicting the behavior of complex systems. Machine learning algorithms have been used to guide diagnostic systems in medicine, recommend interesting products to customers in e-commerce, play games at human championship levels, and solve many other very complex problems. This course is an introduction to algorithms for machine learning and their implementation in the context of big data. We will study different learning settings, the different algorithms that have been developed for these settings, and learn about how to implement these algorithms and evaluate their behavior in practice. We will also discuss dealing with noise, missing values, scalability properties and talk about tools and libraries available for these methods.
At the end of the course, you should be able to:
--Understand when to use machine learning algorithms;
--Understand, represent and formulate the learning problem;
--Apply the appropriate algorithm(s) or tools, with an understanding of the tradeoffs involved including scalability and robustness;
--Correctly evaluate the behavior of the algorithm when solving the problem.",null,null
6,296,1,Independent Projects,"[1,4)",Independent projects in Computer and Data Science.,null,null
7,395,1,Senior Project in Computer Science,"[4,5)","Capstone course for computer science seniors.  Material from previous and concurrent courses used to solve computer programming problems and to develop software systems.  Professional engineering topics such as project management, engineering design, communications, and professional ethics.  Requirements include periodic reporting of progress, plus a final oral presentation and written report.  Scheduled formal project presentations during last week of classes. Counts as SAGES Senior Capstone.",'freshmen & sophomore',null
8,297,1,Special Topics,"[1,4)",Special topics in Computer and Data Science.,'senior',null
9,458,1,Introduction to Bioinformatics,"[3,4)","Fundamental algorithmic and statistical methods in computational molecular biology and bioinformatics will be discussed. Topics include introduction to molecular biology and genetics, DNA sequence analysis, polymorphisms and personal genomics, structural variation analysis, gene mapping and haplotyping algorithms, phylogenetic analysis, biological network analysis, and computational drug discovery. Much of the course will focus on the algorithmic techniques, including but not limited to, dynamic programming, hidden Markov models, string algorithms, graph theories and algorithms, and some representative data mining algorithms. Paper presentations and course projects are also required.",'freshmen & sophomore',null
10,487,1,Advanced Game Development Project,"[3,4)","This game development project course will bring together an inter-professional group of students in the fields of engineering, computer science, and art to focus on the design and development of a complete, fully functioning computer game as an interdisciplinary team. The student teams are given complete liberty to design their own fully functional games from their original concept to a playable game published in an online marketplace. Student teams will experience the entire game development cycle as they execute their projects. Responsibilities include creating a game idea, writing a story, developing the artwork, designing characters, implementing music and sound effects, programming and testing the game, and publishing the final project. Students enrolled in 487 will develop a healthcare or education virtual environment or video game in collaboration with a mentor who has expertise in the chosen area.",null,null
11,312,1,Introduction to Data Science Systems,"[3,4)","An introduction to the software and hardware architecture of data science systems, with an emphasis on Operating Systems and Computer Architecture that are relevant to Data Sciences systems. At the end of the course, the student should understand the principles and architecture of storage systems, file systems (especially, HDFS), memory hierarchy, and GPU. The student should have carried out projects in these areas, and should be able to critically compare various design decisions in terms of capability and performance.",null,null
12,393,1,Software Engineering,"[3,4)",Topics: Introduction to software engineering; software lifecycle models; development team organization and project management; requirements analysis and specification techniques; software design techniques; programming practices; software validation techniques; software maintenance practices; software engineering ethics. Undergraduates work in teams to complete a significant software development project. Graduate students are required to complete a research project.,null,null
13,313,1,Introduction to Data Analysis,"[3,4)","In this class we will give a broad overview of data analysis techniques, covering
techniques from data mining, machine learning and signal processing.  Students will also learn about probabilistic representations, how to conduct an empirical study and support empirical hypotheses through statistical tests, and visualize the results.
Course objectives:
-Expose students to different analysis approaches.
-Understand probabilistic representations and inference mechanisms.
-Understand how to create empirical hypotheses and how to test them.",null,null
14,620,1,Special Topics,"[1, 19)",null,null,null
15,364,1,Computational Perception,"[3,4)","An introduction to the information processing and computational algorithms that underlie perception. The course focuses on vision and audition but also covers other senses and various types of perceptual processing in biological systems. The motivating question is: What are the fundamental computational problems faced by perceptual systems in complex environments? The course draws from fields in engineering and the study of biological perception. Specific topics include signal detection and processing; sound localization; motion perception and estimation; sensory coding; perception of structure; active perception; perceptual invariance; attention; object, sound and speech recognition; visual and auditory scene analysis.",null,null
16,343,1,Theoretical Computer Science,"[3,4)","Introduction to different classes of automata and their correspondence to different classes of formal languages and grammars, computability, complexity and various proof techniques.",null,null
17,339,1,Web Data Mining,"[3,4)","Web crawling technology, web search and information extraction, unsupervised and semi-supervised learning techniques and their application to web data extraction, social network analysis, various pagerank algorithms, link analysis, web resource discovery, web, resource description framework (RDF), XML, Web Ontology Language (OWL).",null,null
18,397,1,Special Topics,"[1,7)",Special topics in Computer and Data Science.,null,null
19,455,1,Applied Graph Theory,"[3,4)","This course serves as an introduction to many of the important aspects of graph theory. Topics include connectivity, flows, matchings, planar graphs, and graph coloring with additional topics selected from extremal graphs, random graphs, bounded treewidth graphs, social networks and small world graphs. The class will explore the underlying mathematical theory with a specific focus on the development and analysis of graph algorithms.",null,null
20,464,1,Computational Perception,"[3,4)","An introduction to the information processing and computational algorithms that underlie perception. The course focuses on vision and audition but also covers other senses and various types of perceptual processing in biological systems. The motivating question is: What are the fundamental computational problems faced by perceptual systems in complex environments? The course draws from fields in engineering and the study of biological perception. Specific topics include signal detection and processing; sound localization; motion perception and estimation; sensory coding; perception of structure; active perception; perceptual invariance; attention; object, sound and speech recognition; visual and auditory scene analysis.",null,null
21,366,1,Computer Graphics,"[3,4)","Theory and practice of computer graphics: object and environment representation including coordinate transformations image extraction including perspective, hidden surface, and shading algorithms; and interaction.  Covers a wide range of graphic display devices and systems with emphasis in interactive shaded graphics.",null,null
22,338,1,Intro to Operating Systems and Concurrent Programming,"[4,5)","Intro to OS: OS Structures, processes, threads, CPU scheduling, deadlocks, memory management, file system implementations, virtual machines, cloud computing. Concurrent programming: fork, join, concurrent statement, critical section problem, safety and liveness properties of concurrent programs, process synchronization algorithms, semaphores, monitors.  UNIX systems programming: system calls, UNIX System V IPCs, threads, RPCs, shell programming.",'junior & senior',null
23,376,1,Mobile Robotics,"[4,5)","Design of software systems for mobile robot control, including: motion control; sensory processing; localization and mapping; mobile-robot planning and navigation; and implementation of goal-directed behaviors.  The course has a heavy lab component involving a sequence of design challenges and competitions performed in teams.",null,null
24,337,1,Compiler Design,"[4,5)",Design and implementation of compilers and other language processors. Scanners and lexical analysis; regular expressions and finite automata; scanner generators; parsers and syntax analysis; context free grammars; parser generators; semantic analysis; intermediate code generation; runtime environments; code generation; machine independent optimizations; data flow and dependence analysis. There will be a significant programming project involving the use of compiler tools and software development tools and techniques.,null,null
25,345,1,Programming Language Concepts,"[3,4)","This course examines the four main programming paradigms: imperative, object-oriented, functional, and logical. It is assumed that students will come to the course with significant exposure to object-oriented programming and some exposure to imperative programming.  The course will teach the functional paradigm in depth, enhance the students' knowledge of the object-oriented and imperative paradigms, and introduce the logical paradigm. The course will explore language syntax, semantics, names/scopes, types, expressions, assignment, subprograms, abstraction and inheritance.  This exploration will have several forms. Students will study the programming language concepts at a theoretical level, use the concepts in functional language programming, and implement the concepts by designing language interpreters.",null,null
26,233,1,Introduction to Data Structures,"[4,5)","Different representations of data: lists, stacks and queues, trees, graphs, and files.  Manipulation of data: searching and sorting, hashing, recursion and higher order functions.  Abstract data types, templating, and the separation of interface and implementation.  Introduction to asymptotic analysis. The Java language is used to illustrate the concepts and as an implementation vehicle throughout the course.",null,null
27,396,1,Independent Projects,"[1,7)",Independent projects in Computer and Data Science.,null,null
28,341,1,Introduction to Database Systems,"[3,4)","Relational model, ER model, relational algebra and calculus, SQL, OBE, security, views, files and physical database structures, query processing and query optimization, normalization theory, concurrency control, object relational systems, multimedia databases, Oracle SQL server, Microsoft SQL server.",null,null
29,373,1,Modern Robot Programming,"[3,4)","The goal of this course is to learn modern methods for building up robot capabilities using the Robot Operating System (ROS). Through a sequence of assignments, students learn how to write software to control both simulated and physical robots. Material includes: interfacing software to robot I/O; path and trajectory planning for robot arms; object identification and localization from 3-D sensing; manipulation planning; and development of graphical interfaces for supervisory robot control. Laboratory assignments are scheduled in small groups to explore implementations on specific robots.  Graduate students will also perform an independent project.",null,null
30,497,1,Artificial Intelligence: Statistical Natural Language Processing,"[3,4)","This course gives students an overview of the stat of the art in natural language processing. We will discuss computational aspects of language modeling  through probabilistic models, computational approaches to syntax (parsing) and semantic representations, discourse and dialog. We will study the applications of these techniques to a variety of problems including information extraction, translation and summarization. At the end of the course a student should be able to (i) understand the various statistical models and algorithms for NLP (ii) modify them as needed or design novel approaches for specific NLP tasks and (iii) understand how to evaluate the performance of these models and compare them to alternatives.",null,null
31,390,1,Advanced Game Development Project,"[3,4)","This game development project course will bring together an inter-professional group of students in the fields of engineering, computer science, and art to focus on the design and development of a complete, fully functioning computer game as an interdisciplinary team. The student teams are given complete liberty to design their own fully functional games from their original concept to a playable game published in an online marketplace. Student teams will experience the entire game development cycle as they execute their projects. Responsibilities include creating a game idea, writing a story, developing the artwork, designing characters, implementing music and sound effects, programming and testing the game, and publishing the final project. Students enrolled in 487 will develop a healthcare or education virtual environment or video game in collaboration with a mentor who has expertise in the chosen area.",null,null
32,476,1,Mobile Robotics,"[3,4)","Design of software systems for mobile robot control, including: motion control; sensory processing; localization and mapping; mobile-robot planning and navigation; and implementation of goal-directed behaviors.  The course has a heavy lab component involving a sequence of design challenges and competitions performed in teams.",null,null
33,293,1,Software Craftsmanship,"[4,5)","A course to improve programming skills, software quality, and the software development process.  Software design; Version control; Control issues and routines;  Pseudo-code programming process and developer testing; Defensive programming; Classes; Debugging; Self-documenting code; Refactoring.",'junior & senior',null
34,490,1,Digital Image Processing,"[3,4)","Digital images are introduced as two-dimensional sampled arrays of data.  The course begins with one-to-one operations such as image addition and subtraction and image descriptors such as the histogram.  Basic filters such as the gradient and Laplacian in the spatial domain are used to enhance images.  The 2-D Fourier transform is introduced and frequency domain operations such as high and low-pass filtering are developed.  It is shown how filtering techniques can be used to remove noise and other image degradation.  The different methods of representing color images are described and fundamental concepts of color image transformations and color image processing are developed.  One or more advanced topics such as wavelets, image compression, and pattern recognition will be covered as time permits.  Programming assignments using software such as MATLAB will illustrate the application and implementation of digital image processing.",null,null
35,405,1,Data Structures and File Management,"[3,4)","Fundamental concepts: sequential allocation, linked allocation, lists, trees, graphs, internal sorting, external sorting, sequential, binary, interpolation search, hashing file, indexed files, multiple level index structures, btrees, hashed files. Multiple attribute retrieval; inverted files, multi lists, multiple-key hashing, hd trees. Introduction to data bases. Data models.",null,null
36,425,1,Computer Networks I,"[3,4)","An introduction to computer networks and the Internet. Applications: http, ftp, e-mail, DNS, socket programming. Transport: UDP, TCP, reliable data transfer, and congestion control. Network layer: IP, routing and NAT. Link layer: taxonomy, Ethernet, 802.11.",null,null
37,377,1,Introduction to Connected Devices,"[3,4)","Introduction to Connected Devices (e.g., Internet of Things).  Undergraduates work in pairs to build a complete connected-device system, an embedded device with wireless networking, cloud and web, and mobile, and then develop hands-on experience with systems-level aspects of the connected-device system, including analytics, remote firmware update, load testing, and essential security.  Students learn about current architectures, languages, and technologies, such as Pub/Sub (MQTT), Python, Objective-C, Python Django, JavaScript, HTML/CSS, and Bluetooth Low Energy.",null,null
38,600,1,Special Topics,"[1,19)",null,null,null
39,600,1,Graduate Teaching III,"[0,1)","This course will provide Ph.D. candidate with experience in teaching undergraduate or graduate students.  The experience is expected to involve direct student contact but will be based upon the specific departmental needs and teaching obligations.  This teaching experience will be conducted under the supervision of the faculty member who is responsible for the course, but the academic advisor will assess the educational plan to ensure that it provides an educational experience for the student.  Students in this course may be expected to perform one or more of the following teaching related activities running recitation sessions, providing laboratory assistance, developing teaching or lecture materials presenting lectures.",null,'Ph.D.'
40,392,1,App Development for iOS,"[3,4)","This course is an introduction to app development for iPhone and iPad using Cocoa Touch Framework and Xcode development environment. Topics include Swift programming language and iOS SDK/foundations, object-oriented design and model-view-controller framework, user interface design using Xcode. Additional topics may include data management, map applications, animations and some recent developments in iOS.",null,null
41,651,1,Thesis M.S.,"[1, 19)",Credit as arranged,null,null
42,486,1,"Quantum Computing, Information, and Devices","[3,4)","An introduction to the math, physics, engineering, and computer science underlying the rapidly emerging fields of quantum computing, quantum information, and quantum devices. The course is taught by a group of faculty from physics, engineering, computer science, and math, and is geared towards students with diverse backgrounds and interests in these fields.  Students will select a concentration in one of these four areas, and the coursework, while still covering all topics, will be adjusted to focus on the selected area in the most detail.  Note that the listed prerequisites depend on choice of concentration. 

Topics will include:
1.	(Mathematics) Introduction to linear algebra, convex geometry, fundamental theory of quantum information.
2.	(Physics) Introduction to the quantum mechanics of two-level systems (qubits). Survey of physics and materials for qubit technologies.
3.	(Computer Science) Basic quantum gates and circuits, introduction to the theory of algorithms, survey of quantum algorithms.
4.	(Engineering) Quantum architectures, mapping algorithms onto circuits.

The course consists of lectures, homework, and group projects.  Group projects will aim to synthesize the diverse backgrounds of the students and instructors to capture the interdisciplinary nature of the field. Students taking the course for graduate credit will complete an additional literature research project and presentation, in addition to enhanced problem sets.",null,null
43,621,1,Special Projects,"[1, 19)",null,null,null
44,310,1,Algorithms,"[3,4)","Fundamentals in algorithm design and analysis. Loop invariants, asymptotic notation, recurrence relations, sorting algorithms, divide-and-conquer, dynamic programming, greedy algorithms, basic graph algorithms.",null,null
45,305,1,"Files, Indexes and Access Structures for Big Data","[3,4)","Database management become a central component of a modern computing environment, and, as a result, knowledge about database systems has become an essential part of education in computer science and data science. This course is an introduction to the nature and purpose of database systems, fundamental concepts for designing, implementing and querying a database and database architectures.
Objectives:
-An expert knowledge of basic data structures, basic searching, sorting, methods,
algorithm techniques, (such as greedy and divide and conquer)
-In-depth knowledge on Search and Index Structures for large, heterogeneous data
including multidimensional data, high dimensional data and data in metric spaces
(e.g., sequences, images), on different search methods (e.g. similarity searching,
partial match, exact match), and on dimensionality reduction techniques.",null,null
46,439,1,Web Data Mining,"[3,4)","Web crawling technology, web search and information extraction, unsupervised and semi-supervised learning techniques and their application to web data extraction, social network analysis, various pagerank algorithms, link analysis, web resource discovery, web, resource description framework (RDF), XML, Web Ontology Language (OWL).",null,null
47,410,1,Analysis of Algorithms,"[3,4)","This course covers fundamental topics in algorithm design and analysis in depth. Amortized analysis, NP-completeness and reductions, dynamic programming, advanced graph algorithms, string algorithms, geometric algorithms, local search heuristics.",null,null
48,499,1,Algorithmic Robotics,"[3,4)","This course introduces basic algorithmic techniques in robotic perception and planning.  Course is divided into two parts.  The first part introduces probabilistic modeling of robotic motion and sensing, Gaussian and nonparametric filters, and algorithms for mobile robot localization.  The second part introduces fundamental deterministic and randomized algorithms for motion planning.",'junior & senior',null
49,314,1,Computer Architecture,"[3,4)","This course provides students the opportunity to study and evaluate a modern computer architecture design.  The course covers topics in fundamentals of computer design, performance, cost, instruction set design, processor implementation, control unit, pipelining, communication and network, memory hierarchy, computer arithmetic, input-output, and an introduction to RISC and super-scalar processors.",null,null
50,493,1,Software Engineering,"[3,4)",Topics: Introduction to software engineering; software lifecycle models; development team organization and project management; requirements analysis and specification techniques; software design techniques; programming practices; software validation techniques; software maintenance practices; software engineering ethics. Undergraduates work in teams to complete a significant software development project. Graduate students are required to complete a research project.,null,null
51,435,1,Data Mining,"[3,4)","Data Mining is the process of discovering interesting knowledge from large amounts of data stored either in databases, data warehouses, or other information repositories. Topics to be covered includes: Data Warehouse and OLAP technology for data mining, Data Preprocessing, Data Mining Primitives, Languages, and System Architectures, Mining Association Rules from Large Databases, Classification and Prediction, Cluster Analysis, Mining Complex Types of Data, and Applications and Trends in Data Mining.",null,null
52,236,1,Introduction to C/C++ Programming,"[1,2)","This course provides an introduction to C and C++ programming languages. Prior knowledge of these languages is not expected. However, students are expected to know at least one programming language prior to the class. The lectures will cover low-level programming techniques and object-oriented class design. Students will learn specific topics in C/C++ including required background knowledge, pointers & references, memory management, inheritance, polymorphism, templates, exceptions, use of debugging and compiler tools, and others as time permits.",null,null
53,456,1,Data Privacy,"[3,4)","Introduction to privacy, economics and incentives, crypto-based solution for privacy, hiding data from the database user, hiding access patterns from the database owner, anonymous routing and TOR, privacy in online social networks, privacy in cellular and Wi-Fi networks, location privacy, privacy in e-cash systems, privacy in e-voting, genomic privacy.",null,null
54,315,1,Scalable Parallel Data Analysis,"[3,4)","This course provides an introduction to scalable and parallel data analysis using the most common frameworks and programming tools in the age of big data. Covered topics include parallel programming models, parallel hardware architectures, multi-threaded, multi-core programming, cluster computing and GPU programming. The course is designed to provide a heavily hands-on experience with several programming assignments.",null,null
56,440,1,Machine Learning,"[3,4)","Machine learning is a subfield of Artificial Intelligence that is concerned with the design and analysis of algorithms that ""learn"" and improve with experience,  While the broad aim behind research in this area is to build systems that can simulate or even improve on certain aspects of human intelligence, algorithms developed in this area have become very useful in analyzing and predicting the behavior of complex systems.  Machine learning algorithms have been used to guide diagnostic systems in medicine, recommend interesting products to customers in e-commerce, play games at human championship levels, and solve many other very complex problems.  This course is focused on algorithms for machine learning: their design, analysis and implementation.  We will study different learning settings, including supervised, semi-supervised and unsupervised learning.  We will study different ways of representing the learning problem, using propositional, multiple-instance and relational representations.  We will study the different algorithms that have been developed for these settings, such as decision trees, neural networks, support vector machines, k-means, harmonic functions and Bayesian methods.  We will learn about the theoretical tradeoffs in the design of these algorithms, and how to evaluate their behavior in practice.  At the end of the course, you should be able to:
   --Recognize situations where machine learning algorithms are applicable;
   --Understand, represent and formulate the learning problem;
   --Apply the appropriate algorithm(s), or if necessary, design your own, with an understanding of the tradeoffs involved;
   --Correctly evaluate the behavior of the algorithm when solving the problem.",null,null
57,589,1,Robotics II,"[3,4)","Survey of research issues in robotics. Force control, visual servoing, robot autonomy, on-line planning, high-speed control, man/machine interfaces, robot learning, sensory processing for real-time control. Primarily a project-based lab course in which students design real-time software executing on multi-processors to control an industrial robot.",null,null
58,234,1,Structured and Unstructured Data,"[3,4)","This course is an introduction to types of data and their representation, storage, processing and analysis. The course has three parts.  In the first part of the course, students will develop a basic understanding and the ability to represent, store, process and analyze structured data. Structured data include catalogs, records, tables, logs, etc., with a fixed dimension and well-defined meaning for each data point. Suitable representation and storage mechanisms include lists and arrays. Relevant techniques include keys, hashes, stacks, queues and trees. In the second part of the course, students will develop a basic understanding and the ability to represent, store, process and analyze semi-structured data. Semi-structured data include texts, web pages and networks, without a dimension and structure, but with well-defined meaning for each data point. Suitable representation and storage mechanisms include trees, graphs and RDF triples. Relevant techniques include XML, YAML, JSON, parsing, annotation, language processing. In the third part of the course, students will develop a basic understanding and the ability to represent, store, process and analyze unstructured data. Unstructured data include images, video, and time series data, without neither a fixed dimension and structure, nor well-defined meaning for individual data points. Suitable representation and storage mechanisms include large matrices, EDF, DICOM. Relevant techniques include feature extraction, segmentation, clustering, rendering, indexing, and visualization.",null,null
59,335,1,Data Mining for Big Data,"[3,4)","With the unprecedented rate at which data is being collected today in almost all fields of human endeavor, there is an emerging economic and scientific need to extract useful information from it. Data mining is the process of automatic discovery of patterns, changes, associations and anomalies in massive databases, and is a highly interdisciplinary field representing the confluence of several disciplines, including database systems, data warehousing, machine learning, statistics, algorithms, data visualization, and high-performance computing. This course is an introduction to the commonly used data mining techniques.
In the first part of the course, students will develop a basic understanding of the basic concepts in data mining such as frequent pattern mining, association rule mining, basic techniques for data preprocessing such as normalization, regression, and classic matrix decomposition methods such as SVD, LU, and QR decompositions. In the second part of the course, students will develop a basic understanding of classification and clustering and be able to apply classic methods such as k-means, hierarchical clustering methods, nearest neighbor methods, association based classifiers. In the third part of the course, students will have a chance to study more advanced data mining applications such as feature selection in high-dimensional data, dimension reduction, and mining biological datasets.",null,null
60,496,1,Artificial Intelligence: Sequential Decision Making,"[3,4)","This course will study the formulation and solution of decision making problems by automated agents. Topics covered include one-shot decision making (decision trees and influence diagrams),  Markov decision processes (MDPs) , automated classical and probabilistic planning, reinforcement learning (RL), hierarchical planning and RL, partially observable MDPs, Bayesian RL, collaborative multi-agent systems.",null,null
61,448,1,Smartphone Security,"[3,4)","This course is designed to better prepare undergraduate and graduate students for researching and developing in the neighborhood of mobile and software security. Lectures, paper readings and presentations, in-class discussions, and projects are the main components. The course covers the basics of Android programming and a wide range of security issues and solutions concerning mobile platforms, including permission analysis, textual artifacts analysis, malware analysis, program analysis, and UI analysis. Students should expect one literature survey paper and one system-building or empirical study project on one selected security solution in mobile app security.",null,null
62,341,1,Introduction to Databases: DS Major,"[3,4)","Database management become a central component of a modern computing environment, and, as a result, knowledge about database systems has become an essential part of education in computer science and data science. This course is an introduction to the nature and purpose of database systems, fundamental concepts for designing, implementing and querying a database and database architectures. 
Weeks 1-6 provide an overview of basic database systems concepts including database design, database systems architecture, and database querying, using relational model and SQL as query language. 
Weeks 7-10 Objects, Semi structured data, XML and RDF basics.
Weeks 11-14 provide an overview of more advanced topics including Database System Architectures (Parallel Databases and Distributed Databases), and Data Warehousing and Information Retrieval.
Students cannot receive credit for both CSDS341 and CSDS341D.",'graduate',null
63,281,1,Logic Design and Computer Organization,"[4,5)",Fundamentals of digital systems in terms of both computer organization and logic level design.  Organization of digital computers; information representation; boolean algebra; analysis and synthesis of combinational and sequential circuits; datapaths and register transfers; instruction sets and assembly language; input/output and communication; memory.,null,null
64,290,1,Introduction to Computer Game Design and Implementation,"[3,4)","This class begins with an examination of the history of video games and of game design. Games will be examined in a systems context to understand gaming and game design fundamentals. Various topics relating directly to the implementation of computer games will be introduced including graphics, animation, artificial intelligence, user interfaces, the simulation of motion, sound generation, and networking. Extensive study of past and current computer games will be used to illustrate course concepts. Individual and group projects will be used throughout the semester to motivate, illustrate and demonstrate the course concepts and ideas. Group game development and implementation projects will culminate in classroom presentation and evaluation.",null,null
65,494,1,Introduction to Information Theory,"[3,4)","This course is intended as an introduction to information and coding theory with emphasis on the mathematical aspects.  It is suitable for advanced undergraduate and graduate students in mathematics, applied mathematics, statistics, physics, computer science and electrical engineering.  

Course content: Information measures-entropy, relative entropy, mutual information, and their properties.  Typical sets and sequences, asymptotic equipartition property, data compression.  Channel coding and capacity: channel coding theorem.  Differential entropy, Gaussian channel, Shannon-Nyquist theorem. Information theory inequalities (400 level). Additional topics, which may include compressed sensing and elements of quantum information theory.",null,null
66,132,1,Introduction to Programming in Java,"[3,4)","An introduction to modern programming language features, computer programming and algorithmic problem solving with an emphasis on the Java language. Computers and code compilation; conditional statements, subprograms, loops, methods; object-oriented design, inheritance and polymorphism, abstract classes and interfaces; types, type systems, generic types, abstract data types, strings, arrays, linked lists; software development, modular code design, unit testing; strings, text and file I/O; GUI components, GUI event handling; threads; comparison of Java to C, C++, and C#.",null,null
67,427,1,Internet Security and Privacy,"[3,4)","This course introduces students to research on Internet security and privacy. Covered topics include denial of service attacks, attacks enabled by man-in-the-middle surveillance, communication hijacking, botnet and fast-flux networks, email and Web spam, threats to privacy on the Internet, and Internet censorship. The course will be based on a collection of research papers. Students will be required to attend lectures, read the materials, prepare written summaries of discussed papers, present a paper in class, complete a course project and take the final exam (in the form of the course project presentation).",null,null
68,400,1,Graduate Teaching I,"[0,1)","This course will provide the Ph.D. candidate with experience in teaching undergraduate or graduate students.  The experience is expected to involve direct student contact but will be based upon the specific departmental needs and teaching obligations.  This teaching experience will be conducted under the supervision of the faculty member who is responsible for the course, but the academic advisor will assess the educational plan to ensure that it provides an educational experience for the student.  Students in this course may be expected to perform one or more of the following teaching related activities: grading homeworks, quizzes, and exams, having office hours for students, tutoring students.",null,'Ph.D.'
69,433,1,Database Systems,"[3,4)","Basic issues in file processing and database management systems. Physical data organization. Relational databases. Database design. Relational Query Languages, SQL. Query languages. Query optimization. Database integrity and security. Object-oriented databases. Object-oriented Query Languages, OQL.",null,null
70,695,1,Project M.S.,"[1, 10)",Research course taken by Plan B M.S. students.,null,null
71,465,1,Computer Vision,"[3,4)","The goal of computer vision is to create visual systems that recognize objects and recover structures in complex 3D scenes.  This course emphasizes both the science behind our understanding of the fundamental problems in vision and the engineering that develops mathematical models and inference algorithms to solve these problems.  Specific topics include feature detection, matching, and classification; visual representations and dimensionality reduction; motion detection and optical flow; image segmentation; depth perception, multi-view geometry, and 3D reconstruction; shape and surface perception; visual scene analysis and object recognition.",null,null
72,310,1,Algorithms,"[3,4)","Fundamentals in algorithm design and analysis. Loop invariants, asymptotic notation, recurrence relations, sorting algorithms, divide-and-conquer, dynamic programming, greedy algorithms, basic graph algorithms.",null,null
73,500,1,CSDS Colloquium,"[0,1)",Seminars on current topics in Computer and Data Science,null,null
74,444,1,Computer Security,"[3,4)","General types of security attacks; approaches to prevention; secret key and public key cryptography; message authentication and hash functions; digital signatures and authentication protocols; information gathering; password cracking; spoofing; session hijacking; denial of service attacks; buffer overruns; viruses, worms, etc., principles of secure software design, threat modeling; access control; least privilege; storing secrets; socket security; firewalls; intrusions; auditing; mobile security.",null,null
75,477,1,Advanced Algorithms,"[3,4)","Design and analysis of efficient algorithms, with emphasis on network flow, combinatorial optimization, and randomized algorithms. Linear programming: duality, complementary slackness, total unimodularity. Minimum cost flow: optimality conditions, algorithms, applications. Game theory: two-person zero-sum games, minimax theorems. Probabilistic analysis and randomized algorithms: examples and lower bounds. Approximation algorithms for NP-hard problems: examples, randomized rounding of linear programs.",null,null
76,442,1,Causal Learning from Data,"[3,4)","This course introduces key concepts and techniques for characterizing, from observational or experimental study data and from background information, the causal effect of a specific treatment, exposure, or intervention (e.g., a medical treatment) upon an outcome of interest (e.g., disease status). The fundamental problem of causal inference is the impossibility of observing the effects of different and incompatible treatments on the same individual or unit.  This problem is overcome by estimating an average causal effect over a study population.  Making valid causal inferences with observational data is especially challenging, because of the greater potential for biases (confounding bias, selection bias, and measurement bias) that can badly distort causal effect estimates.  Consequently, this topic has been the focus of intense cross-disciplinary research in recent years.  Causal inference techniques will be illustrated by applications in several fields such as computer science, engineering, medicine, public health, biology, genomics, neuroscience, economics, and social science.  Course grading will be based on quizzes, homeworks, a class presentation, and a causal data analysis project.

Specific topics: treatments, exposures, and interventions; causal effects and causal effect measures; confounding bias; potential outcomes and counterfactuals; randomized experiments; observational studies; causal directed acyclic graphs (DAGs); exchangeability and conditional exchangeability; effect modification; causal interactions; nonparametric structural equations; Pearl's Back-Door Criterion, Front-Door Criterion, and related results; covariate adjustment; matching on covariates; selection bias; measurement bias; instrumental variables; causal modeling; inverse probability weighting; marginal structural models; standardization; structural nested models; outcome regression; propensity scores; sensitivity analysis.",null,null
77,345,1,Programming Language Concepts,"[3,4)","This course examines the four main programming paradigms: imperative, object-oriented, functional, and logical. It is assumed that students will come to the course with significant exposure to object-oriented programming and some exposure to imperative programming.  The course will teach the functional paradigm in depth, enhance the students' knowledge of the object-oriented and imperative paradigms, and introduce the logical paradigm. The course will explore language syntax, semantics, names/scopes, types, expressions, assignment, subprograms, abstraction and inheritance.  This exploration will have several forms. Students will study the programming language concepts at a theoretical level, use the concepts in functional language programming, and implement the concepts by designing language interpreters.",null,null
78,325,1,Computer Networks I,"[3,4)","An introduction to computer networks and the Internet.  Applications: http, ftp, e-mail, DNS, socket programming.  Transport: UDP, TCP, reliable data transfer, and congestion control.  Network layer: IP, routing, and NAT.  Link layer: taxonomy, Ethernet, 802.11.",null,null
79,701,1,Dissertation Ph.D.,"[1, 10)",Credit as arranged,null,null
80,491,1,Artificial Intelligence: Probabilistic Graphical Models,"[3,4)","This course is a graduate-level introduction to Artificial Intelligence (AI), the discipline of designing intelligent systems, and focuses on probabilistic graphical models.  These models can be applied to a wide variety of settings from data analysis to machine learning to robotics.  The models allow intelligent systems to represent uncertainties in an environment or problem space in a compact way and reason intelligently in a way that makes optimal use of available information and time.  The course covers directed and undirected probabilistic graphical models, latent variable models, associated exact and approximate inference algorithms, and learning in both discrete and continuous problem spaces.  Practical applications are covered throughout the course.",null,null
81,394,1,Introduction to Information Theory,"[3,4)","This course is intended as an introduction to information and coding theory with emphasis on the mathematical aspects.  It is suitable for advanced undergraduate and graduate students in mathematics, applied mathematics, statistics, physics, computer science and electrical engineering.  

Course content: Information measures-entropy, relative entropy, mutual information, and their properties.  Typical sets and sequences, asymptotic equipartition property, data compression.  Channel coding and capacity: channel coding theorem.  Differential entropy, Gaussian channel, Shannon-Nyquist theorem. Information theory inequalities (400 level). Additional topics, which may include compressed sensing and elements of quantum information theory.",null,null
82,459,1,Bioinformatics for Systems Biology,"[3,4)","Description of omic data (biological sequences, gene expression, protein-protein interactions, protein-DNA interactions, protein expression, metabolomics, biological ontologies), regulatory network inference, topology of regulatory networks, computational inference of protein-protein interactions, protein interaction databases, topology of protein interaction networks, module and protein complex discovery, network alignment and mining, computational models for network evolution, network-based functional inference, metabolic pathway databases, topology of metabolic pathways, flux models for analysis of metabolic networks, network integration, inference of domain-domain interactions, signaling pathway inference from protein interaction networks, network models and algorithms for disease gene identification, identification of dysregulated subnetworks network-based disease classification.",null,null
83,393,1,Software Engineering,"[3,4)",Topics: Introduction to software engineering; software lifecycle models; development team organization and project management; requirements analysis and specification techniques; software design techniques; programming practices; software validation techniques; software maintenance practices; software engineering ethics. Undergraduates work in teams to complete a significant software development project. Graduate students are required to complete a research project.,null,null
84,466,1,Computer Graphics,"[3,4)","Theory and practice of computer graphics: object and environment representation including coordinate transformations image extraction including perspective, hidden surface, and shading algorithms; and interaction.  Covers a wide range of graphic display devices and systems with emphasis in interactive shaded graphics.",null,null
85,302,1,Discrete Mathematics,"[3,4)","A general introduction to basic mathematical terminology and the techniques of abstract mathematics in the context of discrete mathematics. Topics introduced are mathematical reasoning, Boolean connectives, deduction, mathematical induction, sets, functions and relations, algorithms, graphs, combinatorial reasoning.",null,null
86,391,1,Introduction to Artificial Intelligence,"[3,4)","This course is an introduction to artificial intelligence.  We will study the concepts that underlie intelligent systems.  Topics covered include problem solving with search, constraint satisfaction, adversarial games, knowledge representation and reasoning using propositional and first order logic, reasoning under uncertainty, introduction to machine learning, automated planning, reinforcement learning and natural language processing.   Recommended: basic knowledge of probability and statistics.",null,null
87,285,1,Linux Tools and Scripting,"[3,4)","A fast paced introduction to linux that brings the project-oriented student from little or no linux experience to be fully capable of using scripting languages as tools in a linux command-line environment. This includes systems administration and agile web services with server-side scripting and server-side management. This also involves data cleaning, scraping, wrangling, and processing user data with regular expressions. Current main languages include php, bash, awk, with some client-side javascript, and very brief looks at tcl/lua, powershell, and python. Tools include vim, make, grep/sed, and curl/wget.",null,null
88,478,1,Computational Neuroscience,"[3,4)","Computer simulations and mathematical analysis of neurons and neural circuits, and the computational properties of nervous systems.  Students are taught a range of models for neurons and neural circuits, and are asked to implement and explore the computational and dynamic properties of these models.  The course introduces students to dynamical systems theory for the analysis of neurons and neural learning, models of brain systems, and their relationship to artificial and neural networks.  Term project required.  Students enrolled in MATH 478 will make arrangements with the instructor to attend additional lectures and complete additional assignments addressing mathematical topics related to the course.",null,null
89,325,1,Computer Networks I,"[3,4)","An introduction to computer networks and the Internet.  Applications: http, ftp, e-mail, DNS, socket programming.  Transport: UDP, TCP, reliable data transfer, and congestion control.  Network layer: IP, routing, and NAT.  Link layer: taxonomy, Ethernet, 802.11.",null,null
90,275,1,Fundamentals of Robotics,"[4,5)","The Fundamentals of Robotics course will expose students to fundamental principles of robotics.  Students will explore high level conceptual foundations of robotics beginning with Braitenberg vehicles and apply this knowledge to simulated and physical robot hardware in laboratory experiences and in a final project.  Laboratory experiences will guide students through applying theory to practice increasingly complex tasks in a project oriented, group work environment.  The course culminates in a robotics challenge project at the end of the semester.  Topics covered are: sensors, actuators, kinematics, control, planning and programming.  Programming languages and concepts (e.g., C++, object oriented programming) used in robotics will be introduced and used with modern robotics programming toolboxes and frameworks.  Prior experience with these languages will not be necessary.  Previous experience with robotics is not required for this course.",null,null
91,386,1,"Quantum Computing, Information, and Devices","[3,4)","An introduction to the math, physics, engineering, and computer science underlying the rapidly emerging fields of quantum computing, quantum information, and quantum devices. The course is taught by a group of faculty from physics, engineering, computer science, and math, and is geared towards students with diverse backgrounds and interests in these fields.  Students will select a concentration in one of these four areas, and the coursework, while still covering all topics, will be adjusted to focus on the selected area in the most detail.  Note that the listed prerequisites depend on choice of concentration. 

Topics will include:
1.	(Mathematics) Introduction to linear algebra, convex geometry, fundamental theory of quantum information.
2.	(Physics) Introduction to the quantum mechanics of two-level systems (qubits). Survey of physics and materials for qubit technologies.
3.	(Computer Science) Basic quantum gates and circuits, introduction to the theory of algorithms, survey of quantum algorithms.
4.	(Engineering) Quantum architectures, mapping algorithms onto circuits.

The course consists of lectures, homework, and group projects.  Group projects will aim to synthesize the diverse backgrounds of the students and instructors to capture the interdisciplinary nature of the field. Students taking the course for graduate credit will complete an additional literature research project and presentation, in addition to enhanced problem sets.",null,null
92,601,1,Independent Study,"[1, 19)",null,null,null
93,133,1,Introduction to Data Science and Engineering for Majors,"[3,4)","This course is an introduction to data science and analytics.

In the first half of the course, students will develop a basic understanding of how to manipulate, analyze and visualize large data in a distributed computing environment, with an appreciation of open source development, security and privacy issues.

Case studies and team project assignments in the second half of the course will be used to implement the ideas. Topics covered will include: Overview of large scale parallel and distributed (cloud) computing; file systems and file i/o; open source coding and distributed versioning, data query and retrieval; basic data analysis; visualization; data security, privacy and provenance.",null,null
94,341,1,Introduction to Database Systems,"[3,4)","Relational model, ER model, relational algebra and calculus, SQL, OBE, security, views, files and physical database structures, query processing and query optimization, normalization theory, concurrency control, object relational systems, multimedia databases, Oracle SQL server, Microsoft SQL server.",null,null
95,489,1,Robotics I,"[3,4)","Orientation and configuration coordinate transformations, forward and inverse kinematics and Newton-Euler and Lagrange-Euler dynamic analysis. Planning of manipulator trajectories. Force, position, and hybrid control of robot manipulators. Analytical techniques applied to select industrial robots.",null,null
96,438,1,High Performance Computing,"[3,4)","High performance computing (HPC) leverages parallel processing in order to maximize speed and throughput. This hands-on course will cover theoretical and practical aspects of HPC. Theoretical concepts covered include computer architecture, parallel programming, and performance optimization. Practical applications will be discussed from various information and scientific fields. Practical considerations will include HPC job management and Unix scripting. Weekly assessments and a course project will be required.",null,null
97,293,1,Software Craftsmanship,"[4,5)","A course to improve programming skills, software quality, and the software development process.  Software design; Version control; Control issues and routines;  Pseudo-code programming process and developer testing; Defensive programming; Classes; Debugging; Self-documenting code; Refactoring.",null,null
98,201,2,Introduction to Linear Algebra for Applications,"[3,4)","Matrix operations, systems of linear equations, vector spaces, subspaces, bases and linear independence, eigenvalues and eigenvectors, diagonalization of matrices, linear transformations, determinants. Less theoretical than MATH 307.",null,null
99,307,2,Linear Algebra,"[3,4)","A course in linear algebra that studies the fundamentals of vector spaces, inner product spaces, and linear transformations on an axiomatic basis. Topics include: solutions of linear systems, matrix algebra over the real and complex numbers, linear independence, bases and dimension, eigenvalues and eigenvectors, singular value decomposition, and determinants. Other topics may include least squares, general inner product and normed spaces, orthogonal projections, finite dimensional spectral theorem. This course is required of all students majoring in mathematics and applied mathematics. More theoretical than MATH 201.",null,null
100,223,2,Calculus for Science and Engineering III,"[3,4)","Introduction to vector algebra; lines and planes. Functions of several variables: partial derivatives, gradients, chain rule, directional derivative, maxima/minima. Multiple integrals, cylindrical and spherical coordinates. Derivatives of vector valued functions, velocity and acceleration. Vector fields, line integrals, Green's theorem. Credit for at most one of MATH 223 and MATH 227 can be applied to hours required for graduation",null,null
101,227,2,Calculus III,"[3,4)",Vector algebra and geometry. Linear maps and matrices. Calculus of vector valued functions. Derivatives of functions of several variables. Multiple integrals. Vector fields and line integrals. Credit for at most one of MATH 223 and MATH 227 can be applied to hours required for graduation,null,null
102,122,3,General Physics II - Electricity and Magnetism,"[4,5)","Electricity and magnetism, emphasizing the basic electromagnetic laws of Gauss, Ampere, and Faraday. Maxwell's equations and electromagnetic waves, interference, and diffraction. This course has a laboratory component. Students may earn credit for only one of the following courses: PHYS 116, PHYS 122, PHYS 124. Prereq: PHYS 121 or PHYS 123.",null,null
103,124,3,Physics and Frontiers II - Electricity and Magnetism,"[4,5)","Time-independent and time-dependent electric and magnetic fields. The laws of Coulomb, Gauss, Ampere, and Faraday. Microscopic approach to dielectric and magnetic materials. Introduction to the usage of vector calculus; Maxwell's equations in integral and differential form. The role of special relativity in electromagnetism. Electromagnetic radiation. This course has a laboratory component. Students may earn credit for only one of the following courses: PHYS 116, PHYS 122, PHYS 124.",null,null
104,380,2,Introduction to Probability,"[3,4)","Combinatorial analysis. Permutations and combinations. Axioms of probability. Sample space and events. Equally likely outcomes. Conditional probability. Bayes' formula. Independent events and trials. Discrete random variables, probability mass functions. Expected value, variance. Bernoulli, binomial, Poisson, geometric, negative binomial random variables. Continuous random variables, density functions. Expected value and variance. Uniform, normal, exponential, Gamma random variables. The De Moivre-Laplace limit theorem. Joint probability mass functions and densities. Independent random variables and the distribution of their sums. Covariance. Conditional expectations and distributions (discrete case). Moment generating functions. Law of large numbers. Central limit theorem. Additional topics (time permitting): the Poisson process, finite state space Markov chains, entropy.",null,null
105,122,2,Calculus for Science and Engineering II,"[4,5)","Continuation of MATH 121. Exponentials and logarithms, growth and decay, inverse trigonometric functions, related rates, basic techniques of integration, area and volume, polar coordinates, parametric equations. Taylor polynomials and Taylor's theorem. Credit for at most one of MATH 122, MATH 124, and MATH 126 can be applied to hours required for graduation",null,null
106,121,3,General Physics I - Mechanics,"[4,5)","Particle dynamics, Newton's laws of motion, energy and momentum conservation, rotational motion, and angular momentum conservation. This course has a laboratory component. Recommended preparation: MATH 121 or MATH 123 or MATH 125 or one year of high school calculus. Students who do not have the appropriate background should not enroll in PHYS 121 without first consulting the instructor. Students may earn credit for only one of the following courses: PHYS 115, PHYS 121, PHYS 123.",null,null
107,121,2,Calculus for Science and Engineering I,"[4,5)","Functions, analytic geometry of lines and polynomials, limits, derivatives of algebraic and trigonometric functions. Definite integral, antiderivatives, fundamental theorem of calculus, change of variables. Recommended preparation: Three and one half years of high school mathematics. Credit for at most one of MATH 121, MATH 123 and MATH 125 can be applied to hours required for graduation. Counts for CAS Quantitative Reasoning Requirement",null,null
108,345,4,Theoretical Statistics I,"[3,4)","Topics provide the background for statistical inference. Random variables; distribution and density functions; transformations, expectation. Common univariate distributions. Multiple random variables; joint, marginal and conditional distributions; hierarchical models, covariance. Distributions of sample quantities, distributions of sums of random variables, distributions of order statistics. Methods of statistical inference. Offered as STAT 345, STAT 445, and PQHS 481",null,null